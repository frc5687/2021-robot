plugins {
	id "java"
	id "idea"
	id "edu.wpi.first.GradleRIO" version "2021.2.2"
	id "com.diffplug.spotless" version "5.6.1"
}
spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
	ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.8').aosp()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeader '/* (C)$YEAR */'
	}
}

wpi.maven.useDevelopment = true
wpi.wpilibVersion = '2021.+'


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "org.frc5687.infiniterecharge.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
	targets {
		roboRIO("roborio") {
			// Team number is loaded either from the .wpilib/wpilib_preferences.json
			// or from command line. If not found an exception will be thrown.
			// You can use getTeamOrDefault(team) instead of getTeamNumber if you
			// want to store a team number in this file.
			team = frc.getTeamNumber()
		}
	}
	artifacts {
		frcJavaArtifact('frcJava') {
			targets << "roborio"
			// Debug can be overridden by command line, for use with VSCode
			debug = frc.getDebugOrDefault(false)
		}
		// Built in artifact to deploy arbitrary files to the roboRIO.
		fileTreeArtifact('frcStaticFileDeploy') {
			// The directory below is the local directory to deploy
			files = fileTree(dir: 'src/main/deploy')
			// Deploy to RoboRIO target, into /home/lvuser/deploy
			targets << "roborio"
			directory = '/home/lvuser/deploy'
		}
	}
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
	implementation wpi.deps.wpilib()
	nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
	nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)


	implementation wpi.deps.vendor.java()
	nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
	nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

	testImplementation 'junit:junit:4.12'

	// Enable simulation gui support. Must check the box in vscode to enable support
	// upon debugging
	simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
	simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, false)

	// Websocket extensions require additional configuration.
	// simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, false)
	// simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, false)
}
// Simulation configuration (e.g. environment variables).
sim {
	// Sets the websocket client remote host.
	// envVar "HALSIMWS_HOST", "10.0.0.2"
}
// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}
